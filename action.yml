name: "Version Increment Action"
description: "Automatically increments the version in a specified version file."
author: "Michael Primke"


inputs:
  file_path:
    description: "The file path where the version is stored."
    required: true
  version_key:
    description: "The version key to search for (e.g., '__version__')."
    required: true
outputs:
  new_version:
    description: "The new version number."
    value: ${{ env.new_version }}
runs:
  using: "composite"
  steps:
    - run: |
        CURRENT_VERSION=$(grep "${{ inputs.version_key }}" ${{ inputs.file_path }} | cut -d "'" -f2)
        echo "Current version: $CURRENT_VERSION"

        # Initialize NEW_VERSION variable to avoid issues with uninitialized variables
        NEW_VERSION=""

        # Retrieve the last commit message
        # Check if the current commit is a merge commit
        if git rev-parse -q --verify MERGE_HEAD; then
          # Get the commit message of the latest non-merge commit
          COMMIT_MSG=$(git log --no-merges -1 --format=%B)
        else
          # Get the commit message of the current commit
          COMMIT_MSG=$(git log -1 --format=%B $GITHUB_SHA)
        fi
        
        echo "Commit Message: $COMMIT_MSG"
        # Check if the commit message specifies a version
        if echo "$COMMIT_MSG" | grep -q "version:"; then
          NEW_VERSION=$(echo "$COMMIT_MSG" | grep -oP "(?<=version: )\\d+\\.\\d+\\.\\d+")
          echo "Using specified version: $NEW_VERSION"
        else
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR_VERSION=${VERSION_PARTS[0]}
          MINOR_VERSION=${VERSION_PARTS[1]}
          PATCH_VERSION=${VERSION_PARTS[2]}

          echo "Parsed version: MAJOR_VERSION=$MAJOR_VERSION, MINOR_VERSION=$MINOR_VERSION, PATCH_VERSION=$PATCH_VERSION"

          # Increment the patch version
          PATCH_VERSION=$((PATCH_VERSION + 1))
          NEW_VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
          echo "Incremented version: $NEW_VERSION"
        fi

        # Ensure NEW_VERSION is not empty before proceeding
        if [ -z "$NEW_VERSION" ]; then
          echo "Error: NEW_VERSION is empty. Exiting."
          exit 1
        fi

        # Update the version in the version file
        echo "${{ inputs.version_key }} = '$NEW_VERSION'" > ${{ inputs.file_path }}

        # Configure git and commit the change
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "GitHub Actions"
        git add ${{ inputs.file_path }}
        git commit -m "Bump version to $NEW_VERSION"
        git push || echo "Nothing to push"

        # Set the new version as an output for the next steps
        echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
      shell: bash
